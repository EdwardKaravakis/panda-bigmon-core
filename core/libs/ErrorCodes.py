"""
Created on Jun 29, 2009
@author: Torre Wenaus
"""

import logging
import core.constants as const

_logger = logging.getLogger('bigpandamon')


class ErrorCodes:
    """
    A root class for error codes and descriptions
    It is a plan B if real error message was not reported and there is not in PanDA DB
    """
    errorCodes = {}

    def __init__(self):
        # create empty dict for each error category
        for c in const.JOB_ERROR_CATEGORIES:
            self.errorCodes[c['error']] = {}

        # job dispatcher error code descriptions
        self.errorCodes['jobdispatchererrorcode'][100] = 'Lost heartbeat'
        self.errorCodes['jobdispatchererrorcode'][101] = 'Job recovery failed for three days'
        self.errorCodes['jobdispatchererrorcode'][102] = 'No reply to sent job'

        # task buffer error code descriptions
        self.errorCodes['taskbuffererrorcode'][100] = 'Job expired and killed three days after submission (or killed by user)'
        self.errorCodes['taskbuffererrorcode'][101] = 'transfer timeout (2weeks)'
        self.errorCodes['taskbuffererrorcode'][102] = 'Expired three days after submission'
        self.errorCodes['taskbuffererrorcode'][103] = 'Aborted by executor interface'
        self.errorCodes['taskbuffererrorcode'][104] = 'Waiting job timed out'
        self.errorCodes['taskbuffererrorcode'][105] = 'Reassigned by rebrokeage'
        self.errorCodes['taskbuffererrorcode'][106] = 'Reassigned by server-side retry'
        self.errorCodes['taskbuffererrorcode'][107] = 'Retried by pilot'
        self.errorCodes['taskbuffererrorcode'][110] = 'Input file lost in SE'

        # Pilot error code descriptions
        self.errorCodes['piloterrorcode'][1008] = 'General pilot error, consult batch log'
        self.errorCodes['piloterrorcode'][1097] = 'Get function can not be called for staging input file'
        self.errorCodes['piloterrorcode'][1098] = 'No space left on local disk'
        self.errorCodes['piloterrorcode'][1099] = 'Get error: Staging input file failed'
        self.errorCodes['piloterrorcode'][1100] = 'Get error: Replica not found'
        self.errorCodes['piloterrorcode'][1101] = 'LRC registration error: Connection refused'
        self.errorCodes['piloterrorcode'][1102] = 'Expected output file does not exist'
        self.errorCodes['piloterrorcode'][1103] = 'No such file or directory'
        self.errorCodes['piloterrorcode'][1104] = 'User work directory too large'
        self.errorCodes['piloterrorcode'][1105] = 'Put error: Failed to add file size and checksum to LFC'
        self.errorCodes['piloterrorcode'][1106] = 'Payload stdout file too big'
        self.errorCodes['piloterrorcode'][1107] = 'Get error: Missing DBRelease file'
        self.errorCodes['piloterrorcode'][1108] = 'Put error: LCG registration failed'
        self.errorCodes['piloterrorcode'][1109] = 'Required CMTCONFIG incompatible with WN'
        self.errorCodes['piloterrorcode'][1110] = 'Failed during setup'
        self.errorCodes['piloterrorcode'][1111] = 'Exception caught by runJob'
        self.errorCodes['piloterrorcode'][1112] = 'Exception caught by pilot'
        self.errorCodes['piloterrorcode'][1113] = 'Get error: Failed to import LFC python module'
        self.errorCodes['piloterrorcode'][1114] = 'Put error: Failed to import LFC python module'
        self.errorCodes['piloterrorcode'][1115] = 'NFS SQLite locking problems'
        self.errorCodes['piloterrorcode'][1116] = 'Pilot could not download queuedata'
        self.errorCodes['piloterrorcode'][1117] = 'Pilot found non-valid queuedata'
        self.errorCodes['piloterrorcode'][1118] = 'Pilot could not curl space report'
        self.errorCodes['piloterrorcode'][1119] = 'Pilot aborted due to DDM space shortage'
        self.errorCodes['piloterrorcode'][1120] = 'Space token descriptor does not match destination path'
        self.errorCodes['piloterrorcode'][1121] = 'Can not read the xml file for registering output files to dispatcher'
        self.errorCodes['piloterrorcode'][1122] = 'Bad replica entry returned by lfc_getreplicas(): SFN not set in LFC for this guid'
        self.errorCodes['piloterrorcode'][1123] = 'Missing guid in output file list'
        self.errorCodes['piloterrorcode'][1124] = 'Output file too large'
        self.errorCodes['piloterrorcode'][1130] = 'Get error: Failed to get POOL file catalog'
        self.errorCodes['piloterrorcode'][1131] = 'Put function can not be called for staging out'
        self.errorCodes['piloterrorcode'][1132] = 'LRC registration error (consult log file)'
        self.errorCodes['piloterrorcode'][1133] = 'Put error: Fetching default storage URL failed'
        self.errorCodes['piloterrorcode'][1134] = 'Put error: Error in mkdir on localSE, not allowed or no available space'
        self.errorCodes['piloterrorcode'][1135] = 'Could not get file size in job workdir'
        self.errorCodes['piloterrorcode'][1136] = 'Put error: Error running md5sum to the file in job workdir'
        self.errorCodes['piloterrorcode'][1137] = 'Put error: Error in copying the file from job workdir to localSE'
        self.errorCodes['piloterrorcode'][1138] = 'Put error: could not get the file size on localSE'
        self.errorCodes['piloterrorcode'][1139] = 'Put error: Problem with copying from job workdir to local SE: size mismatch'
        self.errorCodes['piloterrorcode'][1140] = 'Put error: Error running md5sum to the file on localSE'
        self.errorCodes['piloterrorcode'][1141] = 'Put error: Problem with copying from job workdir to local SE: md5sum mismatch'
        self.errorCodes['piloterrorcode'][1142] = 'Put error: failed to register the file on local SE'
        self.errorCodes['piloterrorcode'][1143] = 'Failed to chmod trf'
        self.errorCodes['piloterrorcode'][1144] = 'Job killed by panda server'
        self.errorCodes['piloterrorcode'][1145] = 'Get error: md5sum mismatch on input file'
        self.errorCodes['piloterrorcode'][1146] = 'Trf installation dir does not exist and could not be installed'
        self.errorCodes['piloterrorcode'][1147] = 'Put error: dccp returned readOnly'
        self.errorCodes['piloterrorcode'][1148] = 'Put error: Failed to remove readOnly file in dCache'
        self.errorCodes['piloterrorcode'][1149] = 'wget command failed to download trf'
        self.errorCodes['piloterrorcode'][1150] = 'Looping job killed by pilot'
        self.errorCodes['piloterrorcode'][1151] = 'Get error: Input file staging timed out'
        self.errorCodes['piloterrorcode'][1152] = 'Put error: File copy timed out'
        self.errorCodes['piloterrorcode'][1153] = 'Lost job was not finished'
        self.errorCodes['piloterrorcode'][1154] = 'Failed to register log file'
        self.errorCodes['piloterrorcode'][1155] = 'Failed to move output files for lost job'
        self.errorCodes['piloterrorcode'][1156] = 'Pilot could not recover job'
        self.errorCodes['piloterrorcode'][1157] = 'Could not create log file'
        self.errorCodes['piloterrorcode'][1158] = 'Reached maximum number of recovery attempts'
        self.errorCodes['piloterrorcode'][1159] = 'Job recovery could not read PoolFileCatalog.xml file (guids lost)'
        self.errorCodes['piloterrorcode'][1160] = 'LRC registration error: file name string limit exceeded 250'
        self.errorCodes['piloterrorcode'][1161] = 'Job recovery could not generate xml for remaining output files'
        self.errorCodes['piloterrorcode'][1162] = 'LRC registration error: Non-unique LFN'
        self.errorCodes['piloterrorcode'][1163] = 'Grid proxy not valid'
        self.errorCodes['piloterrorcode'][1164] = 'Get error: Local input file missing'
        self.errorCodes['piloterrorcode'][1165] = 'Put error: Local output file missing'
        self.errorCodes['piloterrorcode'][1166] = 'Put error: File copy broken by SIGPIPE'
        self.errorCodes['piloterrorcode'][1167] = 'Get error: Input file missing in PoolFileCatalog.xml'
        self.errorCodes['piloterrorcode'][1168] = 'Get error: Total file size too large'
        self.errorCodes['piloterrorcode'][1169] = 'Put error: LFC registration failed'
        self.errorCodes['piloterrorcode'][1170] = 'Error running adler32 on the file in job workdir'
        self.errorCodes['piloterrorcode'][1171] = 'Get error: adler32 mismatch on input file'
        self.errorCodes['piloterrorcode'][1172] = 'Put error: Problem with copying from job workdir to local SE: adler32 mismatch'
        self.errorCodes['piloterrorcode'][1173] = 'PandaMover staging error: File is not cached'
        self.errorCodes['piloterrorcode'][1174] = 'PandaMover transfer failure'
        self.errorCodes['piloterrorcode'][1175] = 'Get error: Problem with copying from local SE to job workdir: size mismatch'
        self.errorCodes['piloterrorcode'][1176] = 'Pilot has no child processes (job wrapper has either crashed or did not send final status)'
        self.errorCodes['piloterrorcode'][1177] = 'Voms proxy not valid'
        self.errorCodes['piloterrorcode'][1178] = 'Get error: No input files are staged'
        self.errorCodes['piloterrorcode'][1179] = 'Get error: Failed to get LFC replicas'
        self.errorCodes['piloterrorcode'][1180] = 'Get error: Globus system error'
        self.errorCodes['piloterrorcode'][1181] = 'Put error: Globus system error'
        self.errorCodes['piloterrorcode'][1182] = 'Get error: Failed to get LFC replica'
        self.errorCodes['piloterrorcode'][1183] = 'LRC registration error: Guid-metadata entry already exists'
        self.errorCodes['piloterrorcode'][1184] = 'Put error: PoolFileCatalog could not be found in workdir'
        self.errorCodes['piloterrorcode'][1185] = 'Put error: Error running adler32 on the file in job workdir'
        self.errorCodes['piloterrorcode'][1186] = 'Software directory does not exist'
        self.errorCodes['piloterrorcode'][1187] = 'Payload metadata is not available'
        self.errorCodes['piloterrorcode'][1188] = 'lcg-getturls failed'
        self.errorCodes['piloterrorcode'][1189] = 'lcg-getturls was timed-out'
        self.errorCodes['piloterrorcode'][1190] = 'LFN too long (exceeding limit of 150 characters)'
        self.errorCodes['piloterrorcode'][1191] = 'Illegal zero file size'
        self.errorCodes['piloterrorcode'][1192] = 'DBRelease file has not been transferred yet'
        self.errorCodes['piloterrorcode'][1194] = 'File verification failed'
        self.errorCodes['piloterrorcode'][1195] = 'Command timed out'
        self.errorCodes['piloterrorcode'][1198] = 'Can not check the child process status from the heartbeat process'
        self.errorCodes['piloterrorcode'][1199] = 'Could not create the directory'
        self.errorCodes['piloterrorcode'][1200] = 'Job terminated by unknown kill signal'
        self.errorCodes['piloterrorcode'][1201] = 'Job killed from the batch system: SIGTERM'
        self.errorCodes['piloterrorcode'][1202] = 'Job killed from the batch system: SIGQUIT'
        self.errorCodes['piloterrorcode'][1203] = 'Job killed from the batch system: SIGSEGV'
        self.errorCodes['piloterrorcode'][1204] = 'Job killed from the batch system: SIGXCPU'
        self.errorCodes['piloterrorcode'][1205] = 'Job killed by user'
        self.errorCodes['piloterrorcode'][1210] = 'No athena output'
        self.errorCodes['piloterrorcode'][1211] = 'Missing installation'
        self.errorCodes['piloterrorcode'][1212] = 'Athena ran out of memory'
        self.errorCodes['piloterrorcode'][1220] = 'Job failed due to unknown reason (consult log file)'

        for code in range(1000, 1300):
            if code in self.errorCodes['piloterrorcode']:
                self.errorCodes['exeerrorcode'][code] = self.errorCodes['piloterrorcode'][code]

        for code in ( 1008, 1098, 1112, 1116, 1117, 1118, 1119, 1163, 1177, 1178 ):
            if code in self.errorCodes['piloterrorcode']:
                self.errorCodes['transexitcode'][code] = self.errorCodes['piloterrorcode'][code]

    def getErrorCodes(self):
        return self.errorCodes

class ErrorCodesAtlas(ErrorCodes):
    """
    ATLAS related error codes and descriptions for exe and transformation categories
    """
    def __init__(self):
        super(ErrorCodesAtlas, self).__init__()

        # Panda errors can be found at https://twiki.cern.ch/twiki/bin/view/Atlas/PandaErrorCodes
    
        self.errorCodes['ddmerrorcode'][100] = 'DQ2 server error'
        self.errorCodes['ddmerrorcode'][200] = 'Could not add output files to dataset'
        self.errorCodes['ddmerrorcode'][201] = 'Panda server failed to register subscription in DQ2'

        self.errorCodes['exeerrorcode'][99] = 'Transformation error code mismatch'
        self.errorCodes['exeerrorcode'][100] = 'Transformation not found in run directory'

        # errors at https://gitlab.cern.ch/atlas/athena/-/blob/master/Tools/PyJobTransformsCore/share/atlas_error_categories.db
        self.errorCodes['exeerrorcode'][60000] = 'segmentation violation'
        self.errorCodes['exeerrorcode'][60010] = 'segmentation fault'
        self.errorCodes['exeerrorcode'][60100] = 'CBNT_Athena::execute() error'
        self.errorCodes['exeerrorcode'][60101] = 'TRTDigitization::execute() error'
        self.errorCodes['exeerrorcode'][60200] = 'egammaShowerShape: Cluster is neither in Barrel nor in Endcap cannot calculate ShowerShape'
        self.errorCodes['exeerrorcode'][60201] = 'LArEMECEnergyCorrection::CalculateChargeCollection error'
        self.errorCodes['exeerrorcode'][60600] = 'Transform Keyboard interrupt'
        self.errorCodes['exeerrorcode'][60701] = 'CBNT_Audit could not allocate memory'
        self.errorCodes['exeerrorcode'][61000] = 'ApplicationMgr Failed to load modules'
        self.errorCodes['exeerrorcode'][61010] = 'DllClassManager Could not load module'
        self.errorCodes['exeerrorcode'][61020] = 'DllClassManager Entry point failure in module'
        self.errorCodes['exeerrorcode'][61100] = 'EventLoopMgr Unable to initialize Algorithm'
        self.errorCodes['exeerrorcode'][61200] = 'ServiceManager Unable to initialize Service'
        self.errorCodes['exeerrorcode'][62000] = 'ServiceManager Finalization of service AthenaSealSvc failed'
        self.errorCodes['exeerrorcode'][62100] = 'pixelRoI service_i: can not locate service DetectorStore'
        self.errorCodes['exeerrorcode'][62200] = 'pool::PersistencySvc::UserDatabase::connectForRead: PFN is not existing in the catalog'
        self.errorCodes['exeerrorcode'][62300] = 'ServiceManager: unable to initialize Service: EventSelector'
        self.errorCodes['exeerrorcode'][62400] = 'JobOptionsSvc error'
        self.errorCodes['exeerrorcode'][62500] = 'PartPropSvc: could not open PDT file'
        self.errorCodes['exeerrorcode'][62510] = 'PartPropSvc: unable to access any PDT file'
        self.errorCodes['exeerrorcode'][62600] = 'AthenaCrash'
        self.errorCodes['exeerrorcode'][62700] = 'DetectorStore: no valid proxy for default object'
        self.errorCodes['exeerrorcode'][62800] = 'JobOptionsSvc: unable to set property'
        self.errorCodes['exeerrorcode'][62900] = 'DllClassManager: system Error'
        self.errorCodes['exeerrorcode'][62910] = 'ApplicationMgr: failure loading declared DLL\'s'
        self.errorCodes['exeerrorcode'][63000] = 'Transform python errors'
        self.errorCodes['exeerrorcode'][63010] = 'Transform python syntax error'
        self.errorCodes['exeerrorcode'][63020] = 'Transform python import error'
        self.errorCodes['exeerrorcode'][63100] = 'Transform argument errors'
        self.errorCodes['exeerrorcode'][63110] = 'maxEvents argument: Too few events requested'
        self.errorCodes['exeerrorcode'][63111] = 'maxEvents argument: Too many events requested'
        self.errorCodes['exeerrorcode'][63200] = 'Transform definition errors'
        self.errorCodes['exeerrorcode'][63300] = 'Transform environment errors'
        self.errorCodes['exeerrorcode'][63400] = 'Transform unknown exceptions'
        self.errorCodes['exeerrorcode'][63500] = 'Transform execution timeout'
        self.errorCodes['exeerrorcode'][63600] = 'Transform execution retries exhausted'
        self.errorCodes['exeerrorcode'][63900] = 'Transform file errors'
        self.errorCodes['exeerrorcode'][64000] = 'Transform input file errors'
        self.errorCodes['exeerrorcode'][64010] = 'Transform input file not found'
        self.errorCodes['exeerrorcode'][64020] = 'Transform input file not readable'
        self.errorCodes['exeerrorcode'][64030] = 'Transform input file empty'
        self.errorCodes['exeerrorcode'][64031] = 'Transform input file contains too few events'
        self.errorCodes['exeerrorcode'][64032] = 'Transform input file contains too many events'
        self.errorCodes['exeerrorcode'][64033] = 'Transform input file: Event counting failed'
        self.errorCodes['exeerrorcode'][64040] = 'Transform input file corrupted'
        self.errorCodes['exeerrorcode'][64100] = 'Transform output file errors'
        self.errorCodes['exeerrorcode'][64110] = 'Transform output file not found'
        self.errorCodes['exeerrorcode'][64120] = 'Transform output file not readable'
        self.errorCodes['exeerrorcode'][64130] = 'Transform output file empty'
        self.errorCodes['exeerrorcode'][64131] = 'Transform output file contains too few events'
        self.errorCodes['exeerrorcode'][64132] = 'Transform output file contains too many events'
        self.errorCodes['exeerrorcode'][64133] = 'Transform output file: Event counting failed'
        self.errorCodes['exeerrorcode'][64140] = 'Transform output file corrupted'
        self.errorCodes['exeerrorcode'][64150] = 'Transform output file already exists'
        self.errorCodes['exeerrorcode'][64200] = 'Error in transform configuration file'
        self.errorCodes['exeerrorcode'][65000] = 'Problems with Database'
        self.errorCodes['exeerrorcode'][65100] = 'Problems with DBRelease'
        self.errorCodes['exeerrorcode'][65110] = 'DBRelease not setup'
        self.errorCodes['exeerrorcode'][65120] = 'Wrong version of DBRelease setup'
        self.errorCodes['exeerrorcode'][65130] = 'Problems with the DBRelease tarfile'
        self.errorCodes['exeerrorcode'][65200] = 'Problems with geometry tag'
        self.errorCodes['exeerrorcode'][65210] = 'Mismatch between Geometry Tag in transform argument geometryVersion and in input file'
        self.errorCodes['exeerrorcode'][66000] = 'Bad file descriptor'
        self.errorCodes['exeerrorcode'][69999] = 'Unknown Transform error'
        self.errorCodes['exeerrorcode'][10000] = 'Athena/Transformation error'
        self.errorCodes['exeerrorcode'][10010] = 'Core dump from CoreDumpSvc'
        self.errorCodes['exeerrorcode'][10100] = 'At/Tr connection error'
        self.errorCodes['exeerrorcode'][10102] = 'Nova DB problems'
        self.errorCodes['exeerrorcode'][10103] = 'Calibration DB problems'
        self.errorCodes['exeerrorcode'][10104] = 'Oracle error ORA-03113'
        self.errorCodes['exeerrorcode'][10110] = 'Conditions database problems'
        self.errorCodes['exeerrorcode'][10120] = 'nfs lock problems with sqlite database'
        self.errorCodes['exeerrorcode'][10130] = 'Lost connection to MySQL server'
        self.errorCodes['exeerrorcode'][10140] = 'Oracle error ORA-02391: exceeded simultaneous SESSIONS_PER_USER limit'
        self.errorCodes['exeerrorcode'][10200] = 'Athena crashes'
        self.errorCodes['exeerrorcode'][10210] = 'Athena init failed'
        self.errorCodes['exeerrorcode'][10212] = 'Missing PFN in PoolFileCatalog'
        self.errorCodes['exeerrorcode'][10213] = 'AuditorSvc init failed'
        self.errorCodes['exeerrorcode'][10214] = 'Pythia DLL not loaded'
        self.errorCodes['exeerrorcode'][10220] = 'Input file corrupted (Wrong input)'
        self.errorCodes['exeerrorcode'][10300] = 'ApplicationMgr Failed to load modules'
        self.errorCodes['exeerrorcode'][10310] = 'DllClassManager Could not load module'
        self.errorCodes['exeerrorcode'][10400] = 'Problems loading dynamic libraries'
        self.errorCodes['exeerrorcode'][10410] = 'Problem loading shared library'
        self.errorCodes['exeerrorcode'][10420] = 'ApplicationMgr: failure loading declared DLL\'s'
        self.errorCodes['exeerrorcode'][10430] = 'Problems loading shared libraries in LD_PRELOAD '
        self.errorCodes['exeerrorcode'][10500] = 'JobOptions errors'
        self.errorCodes['exeerrorcode'][10510] = 'JobOptions file not found'
        self.errorCodes['exeerrorcode'][10520] = 'Error in jobOptions'
        self.errorCodes['exeerrorcode'][10600] = 'Athena Keyboard interrupt'
        self.errorCodes['exeerrorcode'][10700] = 'Athena StoreGateSvc errors'
        self.errorCodes['exeerrorcode'][10710] = 'StoreGateSvc retrieve errors'
        self.errorCodes['exeerrorcode'][10711] = 'StoreGateSvc retrieve(default): No valid proxy for object'
        self.errorCodes['exeerrorcode'][10712] = 'StoreGateSvc retrieve(non-const): No valid proxy for object'
        self.errorCodes['exeerrorcode'][10713] = 'StoreGateSvc retrieve(const): No valid proxy for object'
        self.errorCodes['exeerrorcode'][10720] = 'StoreGateSvc record: object not added to store'
        self.errorCodes['exeerrorcode'][10800] = 'Athena DetectorStore errors'
        self.errorCodes['exeerrorcode'][10810] = 'DetectorStore retrieve errors'
        self.errorCodes['exeerrorcode'][10811] = 'DetectorStore retrieve(default): No valid proxy for object'
        self.errorCodes['exeerrorcode'][10812] = 'DetectorStore retrieve(non-const): No valid proxy for object'
        self.errorCodes['exeerrorcode'][10813] = 'DetectorStore retrieve(const): No valid proxy for object'
        self.errorCodes['exeerrorcode'][10820] = 'DetectorStore record: object not added to store'
        self.errorCodes['exeerrorcode'][10900] = 'Problems with software installation'
        self.errorCodes['exeerrorcode'][10910] = 'Missing system libraries'
        self.errorCodes['exeerrorcode'][10920] = 'Missing libraries'
        self.errorCodes['exeerrorcode'][11000] = 'Athena non-zero exit'
        self.errorCodes['exeerrorcode'][13400] = 'Athena unknown exception'
        self.errorCodes['exeerrorcode'][13410] = 'Athena python exception'
        self.errorCodes['exeerrorcode'][13420] = 'Athena C++ exception'
        self.errorCodes['exeerrorcode'][14100] = 'Athena output file errors'
        self.errorCodes['exeerrorcode'][14110] = 'Athena pool.root file too large (root opened second file)'
        self.errorCodes['exeerrorcode'][15010] = 'Geant4 got stuck in event'
        self.errorCodes['exeerrorcode'][15000] = 'Problems with ElementLink'

        # transformation error code descriptions
        self.errorCodes['transexitcode'][1] = 'Unspecified error, consult log file'
        self.errorCodes['transexitcode'][2] = 'Payload core dump'
        self.errorCodes['transexitcode'][3] = 'Transform setup error'
        self.errorCodes['transexitcode'][4] = 'Failure to convert transform arguments to correct type'
        self.errorCodes['transexitcode'][5] = 'Argument out of allowed range'
        self.errorCodes['transexitcode'][6] = 'TRF_SEGVIO - Segmentation violation'
        self.errorCodes['transexitcode'][7] = 'Problem with an argument given to the transform'
        self.errorCodes['transexitcode'][8] = 'Inconsistent dataset value in input file list'
        self.errorCodes['transexitcode'][9] = 'Error found with transform input file'
        self.errorCodes['transexitcode'][10] = 'ATH_FAILURE - Athena non-zero exit'
        self.errorCodes['transexitcode'][11] = 'Error when handling transform output file'
        self.errorCodes['transexitcode'][12] = 'Problem in setting up the substep graph'
        self.errorCodes['transexitcode'][13] = 'Problem trying to generate requested outputs from given inputs - graph give no path to do this'
        self.errorCodes['transexitcode'][14] = 'Key error in a transform internal dictionary'
        self.errorCodes['transexitcode'][15] = 'No events to be processed in the input file - skipEvents is higher than actual event number'
        self.errorCodes['transexitcode'][16] = 'Invalid selection in a choice restricted argument'
        self.errorCodes['transexitcode'][17] = 'Mandatory argument is missing'
        self.errorCodes['transexitcode'][18] = 'Invalid configuration of a reduction job'
        self.errorCodes['transexitcode'][19] = 'Problem when trying to apply steering to the substep graph'
        self.errorCodes['transexitcode'][26] = 'TRF_ATHENACRASH - Athena crash'
        self.errorCodes['transexitcode'][30] = 'TRF_PYT - transformation python error'
        self.errorCodes['transexitcode'][31] = 'TRF_ARG - transformation argument error'
        self.errorCodes['transexitcode'][32] = 'TRF_DEF - transformation definition error'
        self.errorCodes['transexitcode'][33] = 'TRF_ENV - transformation environment error'
        self.errorCodes['transexitcode'][34] = 'TRF_EXC - transformation exception'
        self.errorCodes['transexitcode'][35] = 'Internal error while generating transform reports'
        self.errorCodes['transexitcode'][36] = 'Call to external metadata program failed'
        self.errorCodes['transexitcode'][37] = 'General runtime error'
        self.errorCodes['transexitcode'][38] = 'Event count validation failed'
        self.errorCodes['transexitcode'][39] = 'Failed to setup DBRelease properly'
        self.errorCodes['transexitcode'][40] = 'Athena crash - consult log file'
        self.errorCodes['transexitcode'][41] = 'TRF_OUTFILE - output file error'
        self.errorCodes['transexitcode'][42] = 'TRF_CONFIG - transform config file error'
        self.errorCodes['transexitcode'][50] = 'TRF_DB - problems with database'
        self.errorCodes['transexitcode'][51] = 'TRF_DBREL_TARFILE - Problems with the DBRelease tarfile'
        self.errorCodes['transexitcode'][52] = 'Problem while attempting to merge output files'
        self.errorCodes['transexitcode'][60] = 'TRF_GBB_TIME - GriBB - output limit exceeded (time, memory, CPU)'
        self.errorCodes['transexitcode'][64] = 'General failure in transform substep executor'
        self.errorCodes['transexitcode'][65] = 'Non-zero exit code from transform substep executor'
        self.errorCodes['transexitcode'][66] = 'Validation failure in transform substep executor'
        self.errorCodes['transexitcode'][67] = 'Transform substep executor timed out'
        self.errorCodes['transexitcode'][68] = 'Errors found in substep executor logfile'
        self.errorCodes['transexitcode'][69] = 'Transform substep executor setup failed'
        self.errorCodes['transexitcode'][70] = 'Transform substep executor wrapper script problem'
        self.errorCodes['transexitcode'][71] = 'Problem with substep executor logfile'
        self.errorCodes['transexitcode'][72] = 'Problem getting AMI tag info'
        self.errorCodes['transexitcode'][74] = 'Input file failed validation'
        self.errorCodes['transexitcode'][75] = 'Output file failed validation'
        self.errorCodes['transexitcode'][79] = 'Copying input file failed'
        self.errorCodes['transexitcode'][80] = 'file in trf definition not found, using the expandable syntax'
        self.errorCodes['transexitcode'][81] = 'file in trf definition not found, using the expandable syntax -- pileup case'
        self.errorCodes['transexitcode'][85] = 'analysis output merge crash - consult log file'
        self.errorCodes['transexitcode'][98] = 'Oracle error - session limit reached'
        self.errorCodes['transexitcode'][99] = 'TRF_UNKNOWN - unknown transformation error'
        self.errorCodes['transexitcode'][102] = 'One of the output files did not get produced by the job'
        self.errorCodes['transexitcode'][104] = 'Copying the output file to local SE failed (md5sum or size mismatch, or LFNnonunique)'
        self.errorCodes['transexitcode'][126] = 'Transformation not executable - consult log file'
        self.errorCodes['transexitcode'][127] = 'Transformation not installed in CE'
        self.errorCodes['transexitcode'][129] = 'Transform received signal SIGHUP'
        self.errorCodes['transexitcode'][130] = 'Transform received signal SIGINT'
        self.errorCodes['transexitcode'][131] = 'Transform received signal SIGQUIT'
        self.errorCodes['transexitcode'][132] = 'Transform received signal SIGILL'
        self.errorCodes['transexitcode'][133] = 'Transform received signal SIGTRAP'
        self.errorCodes['transexitcode'][134] = 'New trf: Transform received signal SIGABRT; Old trf: Athena core dump or timeout, or conddb DB connect exception'
        self.errorCodes['transexitcode'][135] = 'Transform received signal SIGBUS'
        self.errorCodes['transexitcode'][136] = 'Transform received signal SIGFPE'
        self.errorCodes['transexitcode'][137] = 'Transform received signal SIGKILL'
        self.errorCodes['transexitcode'][138] = 'Transform received signal SIGUSR1'
        self.errorCodes['transexitcode'][139] = 'Transform received signal SIGSEGV'
        self.errorCodes['transexitcode'][140] = 'Transform received signal SIGUSR2'
        self.errorCodes['transexitcode'][141] = "New trf: Transform received signal SIGPIPE; Old trf: No input file available - check availability of input dataset at site"
        self.errorCodes['transexitcode'][142] = 'Transform received signal SIGALRM'
        self.errorCodes['transexitcode'][143] = 'Transform received signal SIGTERM'
        self.errorCodes['transexitcode'][145] = 'Transform received signal SIGCHLD'
        self.errorCodes['transexitcode'][146] = 'Transform received signal SIGCONT'
        self.errorCodes['transexitcode'][147] = 'Transform received signal SIGSTOP'
        self.errorCodes['transexitcode'][148] = 'Transform received signal SIGTSTP'
        self.errorCodes['transexitcode'][149] = 'Transform received signal SIGTTIN'
        self.errorCodes['transexitcode'][150] = 'Transform received signal SIGTTOU'
        self.errorCodes['transexitcode'][151] = 'Transform received signal SIGURG'
        self.errorCodes['transexitcode'][152] = 'Transform received signal SIGXCPU'
        self.errorCodes['transexitcode'][153] = 'Transform received signal SIGXFSZ'
        self.errorCodes['transexitcode'][154] = 'Transform received signal SIGVTALRM'
        self.errorCodes['transexitcode'][155] = 'Transform received signal SIGPROF'
        self.errorCodes['transexitcode'][156] = 'Transform received signal SIGWINCH'
        self.errorCodes['transexitcode'][157] = 'Transform received signal SIGIO'
        self.errorCodes['transexitcode'][158] = 'Transform received signal SIGPWR'
        self.errorCodes['transexitcode'][159] = 'Transform received signal SIGSYS'
        self.errorCodes['transexitcode'][162] = 'Transform received signal SIGRTMIN'
        self.errorCodes['transexitcode'][166] = 'PanDA Mover: SRM_INVALID_PATH, No such file or directory'
        self.errorCodes['transexitcode'][192] = 'Transform received signal SIGRTMAX'
        self.errorCodes['transexitcode'][200] = 'Log file not transferred to destination'
        self.errorCodes['transexitcode'][220] = 'Proot: An exception occurred in the user analysis code'
        self.errorCodes['transexitcode'][221] = 'Proot: Framework decided to abort the job due to an internal problem'
        self.errorCodes['transexitcode'][222] = 'Proot: Job completed without reading all input files'
        self.errorCodes['transexitcode'][223] = 'Proot: Input files cannot be opened'
        self.errorCodes['transexitcode'][250] = 'Transform exception raised which the transform did not handle'
        self.errorCodes['transexitcode'][251] = 'Transform error in external call'
        self.errorCodes['transexitcode'][252] = 'Internal transform error'
        self.errorCodes['transexitcode'][253] = 'Unknown error code'



        self.errorCodes['transexitcode'][1198] = 'Can\'t check the child process status from the heartbeat process'
        self.errorCodes['transexitcode'][2100] = "MyProxyError 2100: server name not specified"
        self.errorCodes['transexitcode'][2101] = "MyProxyError 2101: voms attributes not specified"
        self.errorCodes['transexitcode'][2102] = "MyProxyError 2102: user DN not specified"
        self.errorCodes['transexitcode'][2103] = "MyProxyError 2103: pilot owner DN not specified"
        self.errorCodes['transexitcode'][2104] = "MyProxyError 2104: invalid path for the delegated proxy"
        self.errorCodes['transexitcode'][2105] = "MyProxyError 2105: invalid pilot proxy path"
        self.errorCodes['transexitcode'][2106] = "MyProxyError 2106: no path to delegated proxy specified"
        self.errorCodes['transexitcode'][2200] = "MyProxyError 2200: myproxy-init not available in PATH"
        self.errorCodes['transexitcode'][2201] = "MyProxyError 2201: myproxy-logon not available in PATH"
        self.errorCodes['transexitcode'][2202] = "MyProxyError 2202: myproxy-init version not valid"
        self.errorCodes['transexitcode'][2203] = "MyProxyError 2203: myproxy-logon version not valid"
        self.errorCodes['transexitcode'][2300] = "MyProxyError 2300: proxy delegation failed"
        self.errorCodes['transexitcode'][2301] = "MyProxyError 2301: proxy retrieval failed"
        self.errorCodes['transexitcode'][2400] = "MyProxyError 2400: security violation. Logname and DN do not match"
        self.errorCodes['transexitcode'][2500] = "MyProxyError 2500: there is no a valid proxy"
        self.errorCodes['transexitcode'][2501] = "MyProxyError 2501: voms-proxy-info not available in PATH"

        self.errorCodes['transexitcode'][3000] = 'curl failed to download pilot wrapper'
        self.errorCodes['transexitcode'][3001] = 'Failed to download pilot code'

        # ---------------------------------------------------------------------- 
        #               D A Y A B A Y        E R R O R S
        # ----------------------------------------------------------------------
        self.errorCodes['transexitcode'][1000001] = 'ERROR message'
        self.errorCodes['transexitcode'][1000002] = 'FATAL message'
        self.errorCodes['transexitcode'][1000003] = 'segmentation violation message'
        self.errorCodes['transexitcode'][1000004] = 'IOError message'
        self.errorCodes['transexitcode'][1000005] = 'ValueError message'

